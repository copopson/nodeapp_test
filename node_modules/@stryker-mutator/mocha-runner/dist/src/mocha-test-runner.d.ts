import { INSTRUMENTER_CONSTANTS, StrykerOptions } from '@stryker-mutator/api/core';
import { Logger } from '@stryker-mutator/api/logging';
import { I, DirectoryRequireCache } from '@stryker-mutator/util';
import { TestRunner, DryRunResult, DryRunOptions, MutantRunOptions, MutantRunResult } from '@stryker-mutator/api/test-runner';
import { MochaOptions } from '../src-generated/mocha-runner-options';
import { MochaOptionsLoader } from './mocha-options-loader';
import { MochaAdapter } from './mocha-adapter';
export declare class MochaTestRunner implements TestRunner {
    private readonly log;
    private readonly options;
    private readonly loader;
    private readonly mochaAdapter;
    private readonly requireCache;
    testFileNames?: string[];
    rootHooks: any;
    mochaOptions: MochaOptions;
    private readonly instrumenterContext;
    static inject: ["logger", "options", "loader", "mochaAdapter", "directoryRequireCache", "globalNamespace"];
    constructor(log: Logger, options: StrykerOptions, loader: I<MochaOptionsLoader>, mochaAdapter: I<MochaAdapter>, requireCache: I<DirectoryRequireCache>, globalNamespace: typeof INSTRUMENTER_CONSTANTS.NAMESPACE | '__stryker2__');
    init(): Promise<void>;
    dryRun({ coverageAnalysis, disableBail }: DryRunOptions): Promise<DryRunResult>;
    mutantRun({ activeMutant, testFilter, disableBail }: MutantRunOptions): Promise<MutantRunResult>;
    run(intercept: (mocha: Mocha) => void, disableBail: boolean): Promise<DryRunResult>;
    private runMocha;
    private addFiles;
    private configure;
}
//# sourceMappingURL=mocha-test-runner.d.ts.map