"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MochaAdapter = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const fs_1 = (0, tslib_1.__importDefault)(require("fs"));
const plugin_1 = require("@stryker-mutator/api/plugin");
const util_1 = require("@stryker-mutator/util");
const lib_wrapper_1 = require("./lib-wrapper");
const mocha_test_runner_1 = require("./mocha-test-runner");
const DEFAULT_TEST_PATTERN = 'test/**/*.js';
/**
 * A class that contains polyfills for different versions of mocha.
 * Tries to mimic the functionality of mocha's latest api.
 *
 * Currently supports mocha < 6
 */
class MochaAdapter {
    constructor(log) {
        this.log = log;
    }
    create(options) {
        return new lib_wrapper_1.LibWrapper.Mocha(options);
    }
    collectFiles(options) {
        if (lib_wrapper_1.LibWrapper.collectFiles) {
            this.log.debug("Mocha >= 6 detected. Using mocha's `collectFiles` to load files");
            return this.mocha6DiscoverFiles(options);
        }
        else {
            this.log.debug('Mocha < 6 detected. Using custom logic to discover files');
            return this.legacyDiscoverFiles(options);
        }
    }
    async handleRequires(requires) {
        this.log.trace('Resolving requires %s', requires);
        if (lib_wrapper_1.LibWrapper.handleRequires) {
            this.log.trace('Using `handleRequires`');
            const rawRootHooks = await lib_wrapper_1.LibWrapper.handleRequires(requires);
            if (rawRootHooks) {
                if (lib_wrapper_1.LibWrapper.loadRootHooks) {
                    // `loadRootHooks` made a brief appearance in mocha 8, removed in mocha 8.2
                    return await lib_wrapper_1.LibWrapper.loadRootHooks(rawRootHooks);
                }
                else {
                    return rawRootHooks.rootHooks;
                }
            }
        }
        else {
            const modulesToRequire = requires.map((moduleName) => {
                const maybeSetupFileName = path_1.default.resolve(moduleName);
                if (fs_1.default.existsSync(maybeSetupFileName)) {
                    return maybeSetupFileName;
                }
                else {
                    return moduleName;
                }
            });
            this.log.trace('Requiring %s manually', modulesToRequire);
            modulesToRequire.forEach(lib_wrapper_1.LibWrapper.require);
        }
        return undefined;
    }
    mocha6DiscoverFiles(options) {
        const originalProcessExit = process.exit;
        try {
            // process.exit unfortunate side effect: https://github.com/mochajs/mocha/blob/07ea8763c663bdd3fe1f8446cdb62dae233f4916/lib/cli/run-helpers.js#L174
            // eslint-disable-next-line @typescript-eslint/no-empty-function
            process.exit = () => { };
            const files = lib_wrapper_1.LibWrapper.collectFiles(options);
            return files;
        }
        finally {
            process.exit = originalProcessExit;
        }
    }
    legacyDiscoverFiles(options) {
        const globPatterns = this.mochaFileGlobPatterns(options);
        const fileNames = new Set();
        globPatterns.forEach((patten) => lib_wrapper_1.LibWrapper.glob(patten).forEach((fileName) => fileNames.add(fileName)));
        if (fileNames.size) {
            this.log.debug(`Using files: ${JSON.stringify(fileNames, null, 2)}`);
        }
        else {
            this.log.debug(`Tried ${JSON.stringify(globPatterns, null, 2)} but did not result in any files.`);
            throw new Error(`[${mocha_test_runner_1.MochaTestRunner.name}] No files discovered (tried pattern(s) ${JSON.stringify(globPatterns, null, 2)}). Please specify the files (glob patterns) containing your tests in ${util_1.PropertyPathBuilder.create()
                .prop('mochaOptions')
                .prop('spec')} in your config file.`);
        }
        return [...fileNames];
    }
    mochaFileGlobPatterns(mochaOptions) {
        // Use both `spec` as `files`
        const globPatterns = [];
        if (mochaOptions.spec) {
            globPatterns.push(...mochaOptions.spec);
        }
        if (typeof mochaOptions.files === 'string') {
            // `files` if for backward compat
            globPatterns.push(mochaOptions.files);
        }
        else if (mochaOptions.files) {
            globPatterns.push(...mochaOptions.files);
        }
        if (!globPatterns.length) {
            globPatterns.push(DEFAULT_TEST_PATTERN);
        }
        return globPatterns;
    }
}
exports.MochaAdapter = MochaAdapter;
MochaAdapter.inject = (0, plugin_1.tokens)(plugin_1.commonTokens.logger);
//# sourceMappingURL=mocha-adapter.js.map